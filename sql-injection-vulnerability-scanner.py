import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

# Initialize HTTP session and set browser headers
session = requests.Session()
session.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0"

def extract_forms(url):
    """Extract all forms from the HTML content of a given URL"""
    response = session.get(url)
    soup = bs(response.content, "html.parser")
    return soup.find_all("form")

def analyze_form(form):
    """Extract useful information from an HTML form"""
    form_info = {}
    form_info["action"] = form.get("action").lower() if form.get("action") else None
    form_info["method"] = form.get("method", "get").lower()
    form_info["inputs"] = []
    for input_tag in form.find_all("input"):
        input_info = {
            "type": input_tag.get("type", "text"),
            "name": input_tag.get("name"),
            "value": input_tag.get("value", "")
        }
        form_info["inputs"].append(input_info)
    return form_info

def is_vulnerable(response):
    """Check if a response indicates a SQL injection vulnerability"""
    error_messages = {
        "you have an error in your sql syntax;",
        "warning: mysql",
        "unclosed quotation mark after the character string",
        "quoted string not properly terminated",
    }
    for error in error_messages:
        if error in response.content.decode().lower():
            return True
    return False

def scan_for_sql_injection(url):
    """Scan a URL for SQL injection vulnerabilities"""
    # Test URL itself
    for char in "\"'":
        test_url = f"{url}{char}"
        print(f"Trying {test_url}")
        response = session.get(test_url)
        if is_vulnerable(response):
            print(f"SQL Injection vulnerability detected: {test_url}")
            return
    # Test HTML forms
    forms = extract_forms(url)
    print(f"Detected {len(forms)} forms on {url}.")
    for form in forms:
        form_info = analyze_form(form)
        for char in "\"'":
            data = {}
            for input_info in form_info["inputs"]:
                if input_info["type"] == "hidden" or input_info["value"]:
                    data[input_info["name"]] = input_info["value"] + char
                elif input_info["type"] != "submit":
                    data[input_info["name"]] = f"test{char}"
            url = urljoin(url, form_info["action"])
            if form_info["method"] == "post":
                response = session.post(url, data=data)
            elif form_info["method"] == "get":
                response = session.get(url, params=data)
            if is_vulnerable(response):
                print(f"SQL Injection vulnerability detected: {url}")
                print("Form:")
                print(form_info)
                break

if __name__ == "__main__":
    url = "http://testphp.vulnweb.com/artists.php?artist=1"
    scan_for_sql_injection(url)
